{"version":3,"sources":["Components/MapApis.js","App.js","serviceWorker.js","index.js"],"names":["MapApis","loadMap","loadScript","window","initMap","_this","styledMapType","google","maps","StyledMapType","elementType","stylers","color","featureType","visibility","name","map","Map","document","getElementById","zoom","center","lat","lng","mapTypeControlOptions","mapTypeIds","TrafficLayer","setMap","TransitLayer","mapTypes","set","setMapTypeId","this","react_default","a","createElement","id","Component","url","index","getElementsByTagName","script","src","async","defer","parentNode","insertBefore","App","className","MapApis_MapApis","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAEqBA,6MAKpBC,QAAU,WACTC,EACC,kHAEDC,OAAOC,QAAUC,EAAKD,WAEvBA,QAAU,WACT,IAAME,EAAgB,IAAIH,OAAOI,OAAOC,KAAKC,cAC5C,CACC,CACCC,YAAa,WACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCF,YAAa,mBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCF,YAAa,qBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,yBACbH,YAAa,kBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,yBACbH,YAAa,SACbC,QAAS,CACR,CACCG,WAAY,SAIf,CACCD,YAAa,6BACbH,YAAa,mBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,0BACbH,YAAa,kBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,qBACbH,YAAa,kBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,oBACbH,YAAa,WACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,oBACbH,YAAa,SACbC,QAAS,CACR,CACCG,WAAY,SAIf,CACCD,YAAa,MACbF,QAAS,CACR,CACCG,WAAY,SAIf,CACCD,YAAa,MACbH,YAAa,WACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,MACbH,YAAa,mBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,MACbH,YAAa,qBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,eACbF,QAAS,CACR,CACCG,WAAY,SAIf,CACCD,YAAa,WACbF,QAAS,CACR,CACCG,WAAY,SAIf,CACCD,YAAa,WACbH,YAAa,gBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,WACbH,YAAa,cACbC,QAAS,CACR,CACCG,WAAY,SAIf,CACCD,YAAa,WACbH,YAAa,mBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,qBACbF,QAAS,CACR,CACCG,WAAY,SAIf,CACCD,YAAa,OACbH,YAAa,WACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,OACbH,YAAa,mBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,OACbH,YAAa,qBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,gBACbF,QAAS,CACR,CACCC,MAAO,WAER,CACCE,WAAY,gBAIf,CACCD,YAAa,eACbH,YAAa,WACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,eACbH,YAAa,gBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,eACbH,YAAa,kBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,eACbH,YAAa,mBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,eACbH,YAAa,qBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,aACbF,QAAS,CACR,CACCG,WAAY,SAIf,CACCD,YAAa,UACbH,YAAa,mBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,UACbH,YAAa,qBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,eACbH,YAAa,gBACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,kBACbH,YAAa,WACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,QACbF,QAAS,CACR,CACCC,MAAO,WAER,CACCE,WAAY,SAIf,CACCD,YAAa,QACbH,YAAa,WACbC,QAAS,CACR,CACCC,MAAO,aAIV,CACCC,YAAa,QACbH,YAAa,mBACbC,QAAS,CACR,CACCC,MAAO,cAKX,CAAEG,KAAM,eAYLC,EAAM,IAAIb,OAAOI,OAAOC,KAAKS,IAChCC,SAASC,eAAe,OAVX,CACbC,KAAM,GACNC,OAAQ,CAAEC,IAAK,SAAWC,KAAM,YAChCC,sBAAuB,CACtBC,WAAY,CAAC,UACX,kBASe,IAAItB,OAAOI,OAAOC,KAAKkB,cAC7BC,OAAOX,IAED,IAAIb,OAAOI,OAAOC,KAAKoB,cAC7BD,OAAOX,GAEpBA,EAAIa,SAASC,IAAI,aAAcxB,GAC/BU,EAAIe,aAAa,kGA9WjBC,KAAK/B,2CAkXL,OACCgC,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBAtXyBC,aA4XjCnC,EAAa,SAAAoC,GAChB,IAAIC,EAAQpC,OAAOe,SAASsB,qBAAqB,UAAU,GACvDC,EAAStC,OAAOe,SAASiB,cAAc,UAC3CM,EAAOC,IAAMJ,EACbG,EAAOE,OAAQ,EACfF,EAAOG,OAAQ,EACfL,EAAMM,WAAWC,aAAaL,EAAQF,ICnXxBQ,0LAXb,OACCd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACdf,EAAAC,EAAAC,cAAA,UAAQa,UAAU,cACjBf,EAAAC,EAAAC,cAAA,8BACKF,EAAAC,EAAAC,cAACc,EAAD,eANQZ,cCQEa,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAAStC,SAASC,eAAe,SD4H3C,kBAAmBsC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.697739ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class MapApis extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.loadMap();\r\n\t}\r\n\r\n\tloadMap = () => {\r\n\t\tloadScript(\r\n\t\t\t'https://maps.googleapis.com/maps/api/js?key=AIzaSyBc9rfRR9Fy_V33MWWfJsT0Iw2LIGOcgVI&region=US&callback=initMap'\r\n\t\t);\r\n\t\twindow.initMap = this.initMap;\r\n\t};\r\n\tinitMap = () => {\r\n\t\tconst styledMapType = new window.google.maps.StyledMapType(\r\n\t\t\t[\r\n\t\t\t\t{\r\n\t\t\t\t\telementType: 'geometry',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#1d2c4d',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\telementType: 'labels.text.fill',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#8ec3b9',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\telementType: 'labels.text.stroke',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#1a3646',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'administrative.country',\r\n\t\t\t\t\telementType: 'geometry.stroke',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#4b6878',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'administrative.country',\r\n\t\t\t\t\telementType: 'labels',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvisibility: 'off',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'administrative.land_parcel',\r\n\t\t\t\t\telementType: 'labels.text.fill',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#64779e',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'administrative.province',\r\n\t\t\t\t\telementType: 'geometry.stroke',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#4b6878',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'landscape.man_made',\r\n\t\t\t\t\telementType: 'geometry.stroke',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#334e87',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'landscape.natural',\r\n\t\t\t\t\telementType: 'geometry',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#023e58',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'landscape.natural',\r\n\t\t\t\t\telementType: 'labels',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvisibility: 'off',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'poi',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvisibility: 'off',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'poi',\r\n\t\t\t\t\telementType: 'geometry',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#283d6a',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'poi',\r\n\t\t\t\t\telementType: 'labels.text.fill',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#6f9ba5',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'poi',\r\n\t\t\t\t\telementType: 'labels.text.stroke',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#1d2c4d',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'poi.business',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvisibility: 'off',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'poi.park',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvisibility: 'off',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'poi.park',\r\n\t\t\t\t\telementType: 'geometry.fill',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#023e58',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'poi.park',\r\n\t\t\t\t\telementType: 'labels.text',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvisibility: 'off',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'poi.park',\r\n\t\t\t\t\telementType: 'labels.text.fill',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#3C7680',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'poi.sports_complex',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvisibility: 'off',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'road',\r\n\t\t\t\t\telementType: 'geometry',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#304a7d',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'road',\r\n\t\t\t\t\telementType: 'labels.text.fill',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#98a5be',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'road',\r\n\t\t\t\t\telementType: 'labels.text.stroke',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#1d2c4d',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'road.arterial',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#0054a8',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvisibility: 'simplified',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'road.highway',\r\n\t\t\t\t\telementType: 'geometry',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#2c6675',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'road.highway',\r\n\t\t\t\t\telementType: 'geometry.fill',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#00fd20',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'road.highway',\r\n\t\t\t\t\telementType: 'geometry.stroke',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#008080',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'road.highway',\r\n\t\t\t\t\telementType: 'labels.text.fill',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#b0d5ce',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'road.highway',\r\n\t\t\t\t\telementType: 'labels.text.stroke',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#023e58',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'road.local',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvisibility: 'off',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'transit',\r\n\t\t\t\t\telementType: 'labels.text.fill',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#98a5be',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'transit',\r\n\t\t\t\t\telementType: 'labels.text.stroke',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#1d2c4d',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'transit.line',\r\n\t\t\t\t\telementType: 'geometry.fill',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#283d6a',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'transit.station',\r\n\t\t\t\t\telementType: 'geometry',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#3a4762',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'water',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#6dd268',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvisibility: 'off',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'water',\r\n\t\t\t\t\telementType: 'geometry',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#0e1626',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfeatureType: 'water',\r\n\t\t\t\t\telementType: 'labels.text.fill',\r\n\t\t\t\t\tstylers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolor: '#4e6d70',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\t{ name: 'Styled Map' }\r\n\t\t);\r\n\r\n\t\tlet options = {\r\n\t\t\tzoom: 11,\r\n\t\t\tcenter: { lat: 40.524670, lng: -111.863823 },\r\n\t\t\tmapTypeControlOptions: {\r\n\t\t\t\tmapTypeIds: ['roadmap',\r\n\t\t\t\t\t\t'styled_map']\r\n\t\t\t  }\r\n\t\t};\r\n\r\n\t\tlet map = new window.google.maps.Map(\r\n\t\t\tdocument.getElementById('map'),\r\n\t\t\toptions\r\n\t\t);\r\n\r\n\t\tlet trafficLayer = new window.google.maps.TrafficLayer();\r\n\t\ttrafficLayer.setMap(map);\r\n\r\n\t\tlet transitLayer = new window.google.maps.TransitLayer();\r\n\t\ttransitLayer.setMap(map);\r\n\r\n\t\tmap.mapTypes.set('styled_map', styledMapType);\r\n\t\tmap.setMapTypeId('styled_map');\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<main>\r\n\t\t\t\t<div id=\"map\" />\r\n\t\t\t</main>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nlet loadScript = url => {\r\n\tlet index = window.document.getElementsByTagName('script')[0];\r\n\tlet script = window.document.createElement('script');\r\n\tscript.src = url;\r\n\tscript.async = true;\r\n\tscript.defer = true;\r\n\tindex.parentNode.insertBefore(script, index);\r\n};\r\n\r\n//! UTA Token UTDOP000ZRH","import React, { Component } from 'react';\nimport MapApis from './Components/MapApis';\nimport '../src/App.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1>Work Weather App</h1>\n          <MapApis/>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}